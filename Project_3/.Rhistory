xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
plot(xt)
# a)
zt = NULL
xt = NULL
for (i in 1:1) {
if (i == 1) {
zt[i] = 0
}
else {
zt[i] = zt[i-1] * .5
}
zt[i] = zt[i] + rnorm(1,0,5)
xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
plot(xt)
# a)
zt = NULL
xt = NULL
for (i in 1:2) {
if (i == 1) {
zt[i] = 0
}
else {
zt[i] = zt[i-1] * .5
}
zt[i] = zt[i] + rnorm(1,0,5)
xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
# a)
set.seed(3)
# a)
set.seed(3)
zt = NULL
xt = NULL
for (i in 1:5) {
if (i == 1) {
zt[i] = 0
}
else {
zt[i] = zt[i-1] * .5
}
zt[i] = zt[i] + rnorm(1,0,5)
xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
plot(xt)
for (i in 1:10) {
if (i == 1) {
zt[i] = 0
}
else {
zt[i] = zt[i-1] * .5
}
zt[i] = zt[i] + rnorm(1,0,5)
xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
plot(xt)
for (i in 1:100) {
if (i == 1) {
zt[i] = 0
}
else {
zt[i] = zt[i-1] * .5
}
zt[i] = zt[i] + rnorm(1,0,5)
xt[i] = 70 + 2*i - 3*i^2 + zt[i]
}
plot(zt)
plot(xt)
# b)
fit = lm(xt ~ poly(t, 2, raw = T))
# b)
data = data.frame((1:100), xt)
# b)
data = data.frame((1:100), zt)
# b)
data = data.frame(t=(1:100), zt)
data
fit = lm(data ~ poly(t, 2, raw = T))
fit = lm(data$zt ~ poly(data$t, 2, raw = T))
print(summary(fit))
# b)
data = data.frame(t=(1:100), zt)
fit = lm(data$zt ~ poly(data$t, 2))
print(summary(fit))
data
# b)
data = data.frame(t=(1:100), xt)
fit = lm(data$xt ~ poly(data$t, 2))
print(summary(fit))
# c)
acf(fit$residuals)
# c)
acf(fit$residuals, lag.max = 50)
install.packages("nlme")
?gls
??gls
library(nmle)
library(nlme)
?gls
# d)
gls = gls(data$xt ~ poly(data$t, 2), correlation = corAR1(.5))
# d)
gls = gls(lm(data$xt ~ poly(data$t, 2)), correlation = corAR1(.5))
# d)
gls = gls(data$xt ~ poly(data$t, 2), data, correlation = corAR1(.5))
# d)
gls = gls(data$xt ~ poly(data$t, 2), correlation = corAR1(.5))
t = (1:100)
# d)
gls = gls(xt ~ poly(t, 2), correlation = corAR1(.5))
print(gls)
srummary(gls)
summary(gls)
print(summary(gls))
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
# f)
acf(gls$residuals)
# f)
acf(gls$residuals, lag.max = 50)
# c)
acf(fit$residuals, lag.max = 50)
# f)
acf(gls$residuals, lag.max = 50)
?recruitment
??recruitment
library(astsa)
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
# a)
data = rec
acf(rec, lag.max = 40)
pacf(rec, lag.max = 40)
# b)
mod_p = arima(data, order = c(p,0,0))
p = 2
# b)
mod_p = arima(data, order = c(p,0,0))
mod_p_1 = arima(data, order = c(p - 1,0,0))
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
?predict.Arima
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
pred
acf(mod_p$residuals)
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
# f)
pred = predict(mod_0_2, n.ahead = 24)
# f)
pred = predict(mod_0_2, n.ahead = 24)
acf(mod_0_2$residuals)
ts.plot(rec, pred$pred, col = 1:2, xlim=c(1980,1990))
U = pred$pred + pred$se
L = pred$pred - pred$se
xx = c(time(U), rev(time(U)))
yy = c(L, rev(U))
polygon(xx,yy, border = 8, col = gray(.6, alpha = .2))
lines(pred$pred, type = "p", col = 2)
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
# a)
B0 = 2
B1 = -.5
set.seed(3)
xt = NULL
for (i in 1:100) {
if (i == 1) {
xt[i] = B0
}
else {
xt[i] = B0 + B1 * xt[i-1]
}
xt[i] = xt[i] + rnorm(1)
}
plot(xt)
# b)
reg = ar.ols(xt, demean = F,  intercept = T, order.max = 2)
print('--------------------------------------------------------------')
print(reg)
# c)
plot(reg$resid)
# c)
acf(reg$resid)
reg$resid
# c)
acf(reg$resid)
reg$resid[is.na(reg$resid)] = 0
# c)
acf(reg$resid)
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
# c)
acf(reg$resid, lag.max = 40)
# f)
ar = arima(xt, order = c(1,0,0))
print(ar)
plot(xt)
# b)
data = data.frame(t=(1:100), xt)
fit = lm(data$xt ~ poly(data$t, 2))
print('--------------------------------------------------------------')
print(summary(fit))
# c)
acf(fit$residuals, lag.max = 50)
# d)
gls = gls(xt ~ poly(t, 2), correlation = corAR1(.5))
print('--------------------------------------------------------------')
print(summary(gls))
# f)
acf(gls$residuals, lag.max = 50)
# a)
data = rec
acf(rec, lag.max = 40)
pacf(rec, lag.max = 40)
# b)
mod_p = arima(data, order = c(p,0,0))
mod_p_min_1 = arima(data, order = c(p - 1,0,0))
mod_p_1 = arima(data, order = c(p + 1,0,0))
mod_0_2 = arima(data, order = c(0,0,2))
mod_p_2 = arima(data, order = c(p,0,2))
print('--------------------------------------------------------------')
print(mod_p$aic)
print(mod_p_min_1$aic)
print(mod_p_1$aic)
print(mod_0_2$aic)
print(mod_p_2$aic)
# c)
pred = predict(mod_p, n.ahead = 24)
pred
# d)
acf(mod_p$residuals)
# e)
ts.plot(rec, pred$pred, col = 1:2, xlim=c(1980,1990))
U = pred$pred + pred$se
L = pred$pred - pred$se
xx = c(time(U), rev(time(U)))
yy = c(L, rev(U))
polygon(xx,yy, border = 8, col = gray(.6, alpha = .2))
lines(pred$pred, type = "p", col = 2)
?rev
?time
xx
L
# f)
pred = predict(mod_0_2, n.ahead = 24)
acf(mod_0_2$residuals)
ts.plot(rec, pred$pred, col = 1:2, xlim=c(1980,1990))
U = pred$pred + pred$se
acf(mod_0_2$residuals)
ts.plot(rec, pred$pred, col = 1:2, xlim=c(1980,1990))
U = pred$pred + pred$se
L = pred$pred - pred$se
xx = c(time(U), rev(time(U)))
yy = c(L, rev(U))
polygon(xx,yy, border = 8, col = gray(.6, alpha = .2))
lines(pred$pred, type = "p", col = 2)
source("~/Development/CSC_AT_LVC/MAS_372/11_18/HW.R")
library(astsa)
library(tseries)
# set the seed
set.seed(1)
# set up our t variable
t = 1:500
# create the xt time series
xt = 2 * cos(2*pi*(t+15)/50)
# add noise
xt_1 = xt + rnorm(500,0,1)
xt_25 = xt + rnorm(500, 0, 25)
# plot the time series
par(mfrow=c(2,1))
plot(xt_1)
plot(xt_25)
# compute the ACF to lag 100
acf_1 = acf(xt_1, lag.max = 100, plot = F)
acf_25 = acf(xt_25, lag.max = 100, plot = F)
# plot acf
plot(acf_1)
plot(acf_25)
par(mfrow=c(1,1))
# a)
# Set the data to the new gtemp data set
data = gtemp_both
# Create our ARMA model from the tseries library
ARMA_2_1 = arima(data, order=c(2,0,1), method="ML")
print(ARMA_2_1)
# b)
# plot the initial data. Scaled it to support forecasting
ts.plot(data, xlim = c(1850, 2123), ylim=c(-.5, 2))
# Set up forecasting prediction by 100 years
forecast = predict(ARMA_2_1, n.ahead = 100)
# get predictions and standard error
AR_forecast <- forecast$pred
AR_forecast_se <- forecast$se
# plot the forecast predictions and standard error
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
# c)
# Plot the predicted values for data
resid_data = data - ARMA_2_1$residuals
points(resid_data, col = 'blue', type = 'l')
# b)
set.seed(3)
xt = NULL
for (i in 1:1000) {
if (i == 1) {
xt = 0
}
else if (i == 2) {
xt = c(xt, 5/2 * (xt[i-1]))
}
else if (i == 3) {
xt = c(xt, 5/2 * (xt[i-1]) - 2*(xt[i-2]))
}
else {
xt = c(xt, 5/2 * (xt[i-1]) - 2*(xt[i-2]) + 1/2 * (xt[i-3]))
}
xt[i] = xt[i] + rnorm(1)
}
plot(xt)
# c)
# fit AR model
AR_3 = arima(xt, order=c(3,0,0))
AR_3_First_100 = arima(xt[1:100], order=c(3,0,0))
# Print models. Note first model provides an error.
print(AR_3)
print(AR_3_First_100)
# d)
yt = diff(xt)
plot(yt)
# f)
# p for the AR model should be 2, since y_t is written in terms
# of y_t-1 and y_t-2
AR_4 = arima(yt, order=c(2,0,0))
print(AR_4)
# g)
zt = diff(yt)
plot(zt)
# i)
# plot acf
acf(zt)
AR_zt = arima(zt, order=c(1,0,0))
print(AR_zt)
# Read in data
arma_data <- read.csv("ARMA.csv")
# plot first 1000 observations of data
plot(arma_data$x[1:1000],type='l', main='First 1000 observations',
ylab="Score")
# View ACF and PACF of data, to lag 100
acf(arma_data, lag.max = 100)
pacf(arma_data, lag.max = 100)
# Grid search code
# Create results table
results <- data.frame(p = integer(), q = integer(),
AIC = numeric(), stringsAsFactors = FALSE)
# Loop through p 1:6 and q 0:3
for (i in 1:6) {
for (j in 0:3) {
# Try to fit ARIMA model
tryCatch(
expr = {
# If successful, place results in table
mod <- arima(arma_data, order = c(i, 0, j))
results <- rbind(results, data.frame(p = i, q = j, AIC = mod$aic))
},
error = function(e) {
# If there was an error, place null AIC in table
results <- rbind(results, data.frame(p = i, q = j, AIC = NaN))
},
# Diagnostic output as model is running
finally = {
cat("Done with: "); print(i); cat("x"); print(j)
}
)
}
}
# Print raw list of results
print(results)
# Pivot the table to show a grid
wide_table <- reshape(
results,
idvar = "p",
timevar = "q",
direction = "wide"
)
# Clean column names for readability
colnames(wide_table) <- gsub("AIC.", "", colnames(wide_table))
# Print the table
print(wide_table) # We choose ARMA(2,1)
model <- arima(arma_data, c(2,0,1))
model
# Plot ACF of residuals
acf(model$residuals, main="ACF of residuals")
# Plot the middle section of data, as well as their
# predictions from the model fit
plot(arma_data$x[6600:6700],type='l',
main="Observations 6600-6700", ylab="Score")
points(arma_data$x[6600:6700] - model$residuals[6600:6700],
col = "blue", type = "l")
# Linear model for comparison:
time <- 1:10000
model.lm <- lm(arma_data$x ~ time)
summ <- summary(model.lm)
AIC(model.lm)
# Read in data
arma_data <- read.csv("ARMA.csv")
setwd("~/Development/CSC_AT_LVC/MAS_372/Project_3")
# Read in data
arma_data <- read.csv("ARMA.csv")
# plot first 1000 observations of data
plot(arma_data$x[1:1000],type='l', main='First 1000 observations',
ylab="Score")
# View ACF and PACF of data, to lag 100
acf(arma_data, lag.max = 100)
pacf(arma_data, lag.max = 100)
# Grid search code
# Create results table
results <- data.frame(p = integer(), q = integer(),
AIC = numeric(), stringsAsFactors = FALSE)
# Loop through p 1:6 and q 0:3
for (i in 1:20) {
for (j in 0:10) {
# Try to fit ARIMA model
tryCatch(
expr = {
# If successful, place results in table
mod <- arima(arma_data, order = c(i, 0, j))
results <- rbind(results, data.frame(p = i, q = j, AIC = mod$aic))
},
error = function(e) {
# If there was an error, place null AIC in table
results <- rbind(results, data.frame(p = i, q = j, AIC = NaN))
},
# Diagnostic output as model is running
finally = {
cat("Done with: "); print(i); cat("x"); print(j)
}
)
}
}
# Loop through p 1:6 and q 0:3
for (i in 1:20) {
for (j in 0:6) {
# Try to fit ARIMA model
tryCatch(
expr = {
# If successful, place results in table
mod <- arima(arma_data, order = c(i, 0, j))
results <- rbind(results, data.frame(p = i, q = j, AIC = mod$aic))
},
error = function(e) {
# If there was an error, place null AIC in table
results <- rbind(results, data.frame(p = i, q = j, AIC = NaN))
},
# Diagnostic output as model is running
finally = {
cat("Done with: "); print(i); cat("x"); print(j)
}
)
}
}
# Loop through p 1:6 and q 0:3
for (i in 1:10) {
for (j in 0:6) {
# Try to fit ARIMA model
tryCatch(
expr = {
# If successful, place results in table
mod <- arima(arma_data, order = c(i, 0, j))
results <- rbind(results, data.frame(p = i, q = j, AIC = mod$aic))
},
error = function(e) {
# If there was an error, place null AIC in table
results <- rbind(results, data.frame(p = i, q = j, AIC = NaN))
},
# Diagnostic output as model is running
finally = {
cat("Done with: "); print(i); cat("x"); print(j)
}
)
}
}
View(results)
View(results)
# Print raw list of results
print(results)
# Pivot the table to show a grid
wide_table <- reshape(
results,
idvar = "p",
timevar = "q",
direction = "wide"
)
# Clean column names for readability
colnames(wide_table) <- gsub("AIC.", "", colnames(wide_table))
# Print the table
print(wide_table) # We choose ARMA(2,1)
# Print the table
print(wide_table) # We choose ARMA(2,1)
