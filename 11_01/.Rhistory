points(adj_r2_max, reg_summary$adjr2[adj_r2_max], col ="red", cex = 2, pch = 20)
# Plot CP and BIC
plot(reg_summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
cp_min = which.min(reg_summary$cp) # 10
points(cp_min, reg_summary$cp[cp_min], col = "red", cex = 2, pch = 20)
plot(reg_summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
bic_min = which.min(reg_summary$bic) # 6
points(bic_min, reg_summary$bic[bic_min], col = "red", cex = 2, pch = 20)
# ------------ Lasso Regression ---------------
par(mfrow = c(1,1))
# Set up data structures for lasso
x_matrix = model.matrix(train$crim ~ ., data = train)
y_response = train$crim
grid = 10^seq(1.5, -1.5, length = 50)
# make lasso model, plot, and print
lasso_model = cv.glmnet(x_matrix, y_response, alpha = 1, lambda = grid)
plot(lasso_model)
# find best lambda
bestlam = lasso_model$lambda.min
print(bestlam)
# set up testing datasets
x_matrix_test = model.matrix(test$crim ~ ., data = test)
y_response_test = test$crim
lasso.pred = predict(lasso_model, s = bestlam, newx = x_matrix_test, type = "response")
test_MSE_lasso = mean((test$crim - lasso.pred)^2)
bestlam
# Set up data structures for ridge
x_matrix_ridge = model.matrix(train$crim ~ ., data = train)
y_response_ridge = train$crim
grid_ridge = 10^seq(4.5, -1.5, length = 50)
# make ridge model, plot, and print
ridge_model = cv.glmnet(x_matrix_ridge, y_response_ridge, alpha = 0, lambda = grid_ridge)
plot(ridge_model)
# find best lambda
bestlam_ridge = ridge_model$lambda.min
print(bestlam_ridge)
# set up testing datasets
x_matrix_ridge_test = model.matrix(test$crim ~ ., data = test)
y_response_ridge_test = test$crim
ridge.pred = predict(ridge_model, s = bestlam_ridge, newx = x_matrix_ridge_test, type = "response")
test_MSE_ridge = mean((test$crim - ridge.pred)^2)
bestlam_ridge
# Train initial PCR model
pcr_model <- pcr(train$crim~., data = train, scale = TRUE, validation = "CV")
# Create validation plot
validationplot(pcr_model, val.type = "MSEP")
# Create prediction from test data
pcr_test_errors = rep(NA, 13)
for (i in 1:13) {
pred = predict(pcr_model, test, ncomp = i)
pcr_test_errors[i] = mean((test$crim - pred)^2)
}
# Create test MSE
test_MSE_pcr = pcr_test_errors[which.min(pcr_test_errors)]
# ------------ PLS Regression ---------------
pls_model = plsr(crim ~ ., data = train, validation = "CV")
# Create validation plot
validationplot(pls_model, val.type = "MSEP")
# Create prediction from test data
pls_test_errors = rep(NA, 13)
for (i in 1:13) {
pred = predict(pls_model, test, ncomp = i)
pls_test_errors[i] = mean((test$crim - pred)^2)
}
# Create test MSE
test_MSE_pls = pls_test_errors[which.min(pls_test_errors)]
# create tree model
tree_model = tree(crim ~ ., train)
# plot tree model
plot(tree_model)
text(tree_model, pretty = 0)
# predict using test data
tree.pred = predict(tree_model, test)
# create Tree MSE
test_MSE_tree = mean((test$crim - tree.pred)^2)
# PRUNE
cv_tree_model = cv.tree(tree_model, FUN = prune.tree)
best_tree_index = which.min(cv_tree_model$dev)
best_tree_size = cv_tree_model$size[best_tree_index]
prune_tree_model = prune.tree(tree_model, best = best_tree_size)
plot(prune_tree_model)
text(prune_tree_model)
??USArrests
?USArrests
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
pr$sdev
?scale
data = scale(data)
# Question 8
data = USArrests
data = scale(data)
# a)
pr = prcomp(data, scale = TRUE)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
pve
# b)
scores = pr$x
scores
sum(scored[1,])
sum(scores[1,])
sum(scores[1,]) / sum(data[1, ])
sum(scores[1,]) / sum(data[1, ]^2)
sum(scores[1,]^2) / sum(data[1, ]^2)
sum(scores[1,]^2)
sum(data[1,]^2)
sum(scores[1,]) / sum(data[1, ]^2)
pve
sum(scores[,1]) / sum(data[, 1]^2)
sum(data[, 1]^2)
sum(scores[, 1]^2)
sum(scores[,1]^2) / sum(data[, 1]^2)
sum(data[,1]^2) / sum(scores[, 1]^2)
sum(data[,1]) / sum(scores[, 1]^2)
sum(scores[,1]) / sum(data[, 1])
data[,1]
?USArrests
data$Murder
data['Muder']
data['Murder']
USArrests$Murder
scale(USArrests$Murder)
sum(scores[,1]^2) / sum(data)
sum(scores[,1]^2) / sum(data^2)
lis = []
for (i in 1:4) {
lis[i] = sum(scores[, i]^2) / sum(data^2)
}
lis = rep(0,4)
for (i in 1:4) {
lis[i] = sum(scores[, i]^2) / sum(data^2)
}
print(lis)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
data = matrix()
# a)
for (i in 1:50) {
}
d_col = rep(0, 0)
?rnorm
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (i in 1:3) {
if (i == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (i == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
data
# a)
for (i in 1:1) {
d_col = rep(0, 0)
for (i in 1:3) {
if (i == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (i == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
data
View(data)
View(data)
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (i in 1:3) {
if (i == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (i == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
# b)
pr = prcomp(data, scale = TRUE)
# b)
pr = prcomp(data)
data = data.frame()
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (i in 1:3) {
if (i == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (i == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (j in 1:3) {
if (j == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (j == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
data = data.frame(rep(0,))60
data = data.frame(rep(0,60))
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (j in 1:3) {
if (j == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (j == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
data = data.frame(data, d_col)
}
View(data)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (j in 1:3) {
if (j == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (j == 2) {
d_col = c(d_col, rnorm(20, 5, .5))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
if (i == 1) {
data = data.frame(d_col)
}
else {
data = data.frame(data, d_col)
}
}
View(data)
# b)
pr = prcomp(data, scale = TRUE)
biplot(pr, scale = 0)
biplot(pr, scale = 0)
# b)
pr = prcomp(data, scale = TRUE)
pr$rotation = -pr$rotation
pr$x = -pr$x
biplot(pr, scale = 0)
biplot(pr)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
# a)
for (i in 1:50) {
d_col = rep(0, 0)
for (j in 1:3) {
if (j == 1) {
d_col = c(d_col, rnorm(20, -5, 2))
}
else if (j == 2) {
d_col = c(d_col, rnorm(20, 5, 3))
}
else {
d_col = c(d_col, rnorm(20, 0, .1))
}
}
if (i == 1) {
data = data.frame(d_col)
}
else {
data = data.frame(data, d_col)
}
}
# b)
pr = prcomp(data, scale = TRUE)
biplot(pr, scale = 0)
library(FactoMineR)
# b)
pr = pca(data)
# b)
pr = PCA(data)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
importance(pr)
pr$sdev
sum(pr$sdev)
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
pve
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/10_28/HW.R")
library(ISLR2)
library(MASS)
library(leaps)
library(pls)
library(glmnet)
library(tree)
# a)
# First, we split the Boston data set into testing and training data
# The training data contains 9/10 of the original data, which amounts
# to around 450 / 500 rows
set.seed(1)
rand = sample(c(rep(T, 9), F), nrow(Boston), replace = T)
train = Boston[rand, ]
test = Boston[!rand, ]
# ------------ Best Subset Selection ---------------
# Fit model
regfit = regsubsets(crim~., data = train, nvmax = 14)
regfit_test_mat = model.matrix(crim ~ ., data = test)
regfit_test_errors = rep(NA, 13)
for (i in 1:13) {
coefi = coef(regfit, id = i)
pred = regfit_test_mat[, names(coefi)] %*% coefi
regfit_test_errors[i] = mean((test$crim - pred)^2)
}
# get Test MSE
test_MSE_regfit = regfit_test_errors[which.min(regfit_test_errors)]
# Gather summary
reg_summary = summary(regfit)
par(mfrow = c(2,2))
# Plot RSS and Adj R^2
plot(reg_summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg_summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
# Find max Adj R^2
adj_r2_max = which.max(reg_summary$adjr2)
points(adj_r2_max, reg_summary$adjr2[adj_r2_max], col ="red", cex = 2, pch = 20)
# Plot CP and BIC
plot(reg_summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
cp_min = which.min(reg_summary$cp) # 10
points(cp_min, reg_summary$cp[cp_min], col = "red", cex = 2, pch = 20)
plot(reg_summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
bic_min = which.min(reg_summary$bic) # 6
points(bic_min, reg_summary$bic[bic_min], col = "red", cex = 2, pch = 20)
lm = lm(train$crim ~ train$rad + train$lstat)
summary(lm)
source("~/Development/CSC_AT_LVC/MAS_372/Project_2/Project_2_Crime.R")
summary(pcr_model)
summary(pcr_model)
class_no_1 = rep(1,20)
class_no_2 = rep(2,20)
# Question 8
data = USArrests
data = scale(data)
# a)
pr = prcomp(data)
pr.var = pr$sdev^2
pve = pr.var / sum(pr.var)
# b)
scores = pr$x
lis = rep(0,4)
for (i in 1:4) {
lis[i] = sum(scores[, i]^2) / sum(data^2)
}
print(lis)
# a)
set.seed(1)
for (i in 1:50) {
d_col = rep(0, 0)
for (j in 1:3) {
if (j == 1) {
d_col = c(d_col, rnorm(20, -10, 6))
}
else if (j == 2) {
d_col = c(d_col, rnorm(20, 5, 3))
}
else {
d_col = c(d_col, rnorm(20, 0, 5))
}
}
if (i == 1) {
data = data.frame(d_col)
}
else {
data = data.frame(data, d_col)
}
}
class_no_1 = rep(1,20)
class_no_2 = rep(2,20)
class_no_3 = rep(3,20)
class_nos = c(class_no_1, class_no_2, class_no_3)
data$class_no = class_nos
# b)
pr = prcomp(data - class_no, scale = TRUE)
# b)
pr = prcomp(data - data$class_no, scale = TRUE)
# b)
pr = prcomp(data[, !class_no], scale = TRUE)
# b)
pr = prcomp(data[, !data$class_no], scale = TRUE)
View(data)
View(data)
data.frame(class_nos, data)
View(data)
data.frame(class_nos, data)
class_nos
View(data)
names(data)
# b)
pr = prcomp(data[, !data$class_no], scale = TRUE)
biplot(pr, scale = 0)
# b)
pr = prcomp(data[!data$class_no], scale = TRUE)
biplot(pr, scale = 0)
data$class_no
data[!data$class_no]
data[!data$class_no,]
data[,!data$class_no]
library(dplyr)
# b)
train_data = select(data, -class_nos)
pr = prcomp(train_data, scale = TRUE)
biplot(pr, scale = 0)
# c)
km = kmeans(train_data, 3, nstart = 20)
km$cluster
print(km$cluster)
km
# c)
km3 = kmeans(train_data, 3, nstart = 20)
print(km3$cluster)
# d)
km2 = kmeans(train_data, 2, nstart = 20)
print(km2$cluster)
# e)
km4 = kmeans(train_data, 4, nstart = 20)
print(km4$cluster)
plot(train_data, col = (km3$cluster + 1), pch = 20)
plot(train_data, col = (km3$cluster + 1), pch = 20)
plot(train_data, col = (km3$cluster + 1), pch = 20,
cex = 2)
plot(train_data, col = (km3$cluster + 1), pch = 20,
cex = 2)
plot(train_data, col = (km3$cluster + 1), pch = 20,
cex = 2)
plot(train_data, col = (km3$cluster),
cex = 2)
plot(train_data, col = (km3$cluster),
cex = 2)
biplot(pr, scale = 0)
# c)
km3 = kmeans(train_data, 3, nstart = 20)
print(km3$cluster)
print(km)
# d)
km2 = kmeans(train_data, 2, nstart = 20)
print(km2$cluster)
km2
# e)
km4 = kmeans(train_data, 4, nstart = 20)
print(km4$cluster)
km4
dat <- t(scale(t(USArrests)))
d1 <- dist(dat)^2
d2 <- as.dist(1 - cor(t(dat)))
plot(d1, d2)
# a)
set.seed(1)
hc <- hclust(dist(USArrests), method = "complete")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
# a)
read.csv("../Ch12Ex13.csv")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
setwd("~/Development/CSC_AT_LVC/MAS_372/11_01")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
source("~/Development/CSC_AT_LVC/MAS_372/11_01/HW.R")
